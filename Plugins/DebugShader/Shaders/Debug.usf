#include "/Engine/Public/Platform.ush"

/*void MainVS(in float InPos : ATTRIBUTE0,
            out float OutPos : SV_POSITION)
{
    OutPos = InPos;
}

float4 MainPS() : SV_Target0
{
    return float4(1, 0, 0, 1); // Red
}*/


// Vertex Shader - Generates fullscreen triangle from vertex ID
void MainVS(
	in float4 InPos : ATTRIBUTE0,
	in float4 InColor : ATTRIBUTE1,
    uint VertexId : SV_VertexID,
    out float4 OutPosition : SV_POSITION,
    out float2 OutUV : TEXCOORD0,
	out float4 OutColor : COLOR0
)
{
    // Generate fullscreen triangle
    // Vertex 0: (-1, -1)
    // Vertex 1: (-1,  3)
    // Vertex 2: ( 3, -1)
    OutUV = float2((VertexId << 1) & 2, VertexId & 2);
//    OutPosition = float4(OutUV * float2(2.0f, -2.0f) + float2(-1.0f, 1.0f), 0.0f, 1.0f);
	  OutPosition = InPos * float4(0.5, 0.5, 0.5, 1.0);
	  OutColor    = InColor;
}

// Pixel Shader - Simple gradient based on screen position
void MainPS(
    float4 SvPosition : SV_POSITION,
    float2 UV : TEXCOORD0,
	in float4 InColor : COLOR0,
    out float4 OutColor : SV_Target0
)
{
    // Create a gradient effect
    float2 center = float2(0.5, 0.5);
    float dist = distance(UV, center);
    
    // Red to blue gradient based on distance from center
    float3 color = lerp(float3(1, 0, 0), float3(0, 0, 1), dist * 2.0);
    
//    OutColor = float4(color, 1); // Semi-transparent
	
	OutColor = InColor;
}

